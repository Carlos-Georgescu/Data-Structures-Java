-----------------------------------------------------------
    Graph Data Structure
-----------------------------------------------------------

Linear vs. Hierachical Data Structure

Logical Mode:
	--> collection of entity 
	--> Graph: A graph is #an ordered pair# of set V of vertices
	--> As well as a set E of edges

	--> Name all node arbitarily
	--> how to represent an edge?

	--> Directed Edge vs Un-Directed Edge

Directed Edge: Is One Way, ordered pair
Un-Directed Edge: Both way, unordered pair

Directed Graph is called Digraph

There are a lot of standard graph problems/algorithms for traversal

You can represent an Un-Directed graph with Digraph

Weights: You can assign custom value of each edge to make weighted graph

--> All graph are basically weighted -> unweighted graph(edge value of one)

-----------------------------------------------------------
    More Properties of Graphs
-----------------------------------------------------------

Self Loop and Multi edge are ways we can construct the edges of a graph

- why multi edge? it can be used to represent different weights

Question: Compute the maximum direct/ Un-Directed edges 

Dense Graphs: Lots of edges - stored using adjacency matrix

Sparce Graphs: Few edges - stored using adjaceny list

Path: a sequence of vertices 

Simple Path: no repeated vertices or edges

Trail: Edge can be repeats but no vertices can be repeated

Closed Walk: Start and end on the same vertices

Simple Cycle: NO repetition other then start and end

Connected/Strongly Connected: You can reach any node from any node 

Weakly Connected: You cant

Acyclic Graph: No simple cycle allowed
				- > you can have directed(#Tree#) or Un-Directed graphs

-----------------------------------------------------------
    				Implementation
-----------------------------------------------------------
Vertex List:

	This is a must have for vertex name / representation index look up

Edge List Implementation:

	This is the worst case representation, which each edge being represented a row
	->Time Complexity of looking up a node's all connections
		-> O(number of edges(v^2))
	->Time Complexity of looking up whether two nodes are connected
		-> O(number of edges(v^2))

Adjaceny List:

	Represent the vertex using a hashtable, add edges as linkedlist as needed
	->hashtable backed linkedlist, each key is either an index or the actual string name
	->each value is a node representing a weight(if weighted) and a string(name of the connected node)
	->Time Complexity of looking up a node's all connections
		-> O(number of connections)
	->Time Complexity of looking up whether two nodes are connected
		-> O(number of connections) worst case
		-> O(1) best case
			it's different for directed vs un-directed graphs

Adjaceny Matrix:

	The adjaceny matrix method use a lot of space
	we create a v by v matrix
	fill it up with zero
	if there is a connection between the two nodes, change the 0 to 1
	if there is weights, use infinity and weight
	if it's non directed, you change one thing at a time, or both if un-directed

	->Time Complexity of looking up a node's all connections
		-> O(number of connections) -> this can be very very slow
	->Time Complexity of looking up whether two nodes are connected
		-> O(1)

	Space is V^2, this is very large

!For a Dense Graph, use adjaceny matrix, for a Sparse Graph, use adjaceny list
	





